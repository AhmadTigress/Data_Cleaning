# -*- coding: utf-8 -*-
"""Scaling_and_Normalization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UecPXgl3DfxmHDyPwEcbr1zKBqIAffLL
"""

import pandas as pd
import numpy as np

# For Box_Cox transformation
from scipy import stats

# For min_max scaling
from mlxtend.preprocessing import minmax_scaling

# Plotting modules
import seaborn as sns
import matplotlib.pyplot as plt

# Set seed for reproducibility
np.random.seed(0)

"""Normalization vs Scaling

...in scaling, you're changing the range of your data

...in normalization, you're changing the shape of the distribution of your data.
"""

# Generate 1000 random data points randomly drawn from an exponential distribution
original_data = np.random.exponential(size=1000)

# MInmax scale the data
scaled_data = minmax_scaling(original_data, columns=[0])

# Plot both together to compare
fig, ax = plt.subplots(1, 2, figsize=(15, 3))
sns.histplot(original_data, ax=ax[0], kde=True, legend=False)
ax[0].set_title("Originat Data")

sns.histplot(scaled_data, ax=ax[1], kde=True, legend=False)
ax[1].set_title("Scaled Data")
plt.show()

# Normalize the exponential data with boxcox
normalized_data = stats.boxcox(original_data)

# Plot both together to compare
fig, ax = plt.subplots(1, 2, figsize=(15, 3))
sns.histplot(original_data, ax=ax[0], kde=True, legend=False)
ax[0].set_title("Original Data")

sns.histplot(normalized_data[0], ax=ax[1], kde=True, legend=False)
ax[1].set_title("Normalized Data")

plt.show()

